# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#    - name: Test with pytest
#      run: |
#        pytest

  package-windows:
    name: Create Windows Package
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Create EXE
        uses: addnab/docker-run-action@v3
        with:
           image: cdrx/pyinstaller-windows
           options: -v ${{ github.workspace }}:/src
           run: |
             ls -l
             cd /src
             pyinstaller --clean -F --onefile main.py
             cp .env.SAMPLE dist/.env
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: schedule-osb-studio-start-stream-Windows-Version
          path: |
            dist
            !dist/**/*.md
            
  pyinstaller-mac-11:
    runs-on: macos-11
    steps:
      - name: icu
        run: |
          brew update --preinstall
          brew install pkg-config icu4c
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: update tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: run builder
        run: |
          export PATH="/usr/local/opt/icu4c/bin:/usr/local/opt/icu4c/sbin:${PATH}"
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:/usr/local/opt/icu4c/lib/pkgconfig"
          pip install pyinstaller
          pyinstaller --clean -F --onefile main.py
          cp .env.SAMPLE dist/.env
      - name: artifact dist
        uses: actions/upload-artifact@v3
        with:
          name: mac-11-dist
          path: "*.zip"
